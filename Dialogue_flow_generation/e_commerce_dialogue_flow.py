# -*- coding: utf-8 -*-
"""e-commerce_dialogue_flow.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OzlLRUVO7COul_3Jziejvyz7r8SXF-MQ
"""

import random
import itertools
from itertools import combinations
from collections import Counter
import re
import json

'''def isNegotiable(accesory):
  negotiable = []
  flag=True
  non_negotiable = ['RAM', 'graphics', 'screen', 'processor' ,'storage','screen', 'material_type size','screen_quality','sound', 'smart_features']
  for acces in accesory:
    if acces not in non_negotiable:
      negotiable.append(acces)
    else:
      flag=False

    return flag,negotiable'''

import math
def seller_price_decay(seller,buyer,turn):
  k = 0.5
  return buyer + (seller-buyer)*math.exp(-k*turn)
def buyer_price_decay(seller,buyer,turn):
  k=0.2
  return seller - (seller-buyer)*math.exp(-k*turn)

'''fix_seller = 14600
tolerance = 700
fix_buyer = 12200
buyer = fix_buyer
seller = fix_seller
for i in range(1,5):
  #seller = seller_price_decay(fix_seller,fix_buyer,i)
  
  print("buyer: ",buyer)
  print("seller: ",seller)
  if seller <= buyer+tolerance:
    print('accepted')
    
  else:
    buyer = math.floor(buyer_price_decay(fix_seller,fix_buyer,i))
    seller = math.ceil(seller_price_decay(fix_seller,fix_buyer,i))
'''

'''prod_dict = {0:'Laptop',1:'SmartPhone',2:'Sofa',3:'TV'}
X_access = {'Laptop':'headphone charger hard_drive pendrive webcam mouse keyboard tablet',
            'SmartPhone':'Wireless_Earphone charger OTG_cable',
            'Sofa':'coffee_table',
            'TV':'sound_box set_top_box headphone'}
X_features = {'Laptop': 'RAM graphics screen processor storage',
              'SmartPhone':'RAM storage processor screen',
              'Sofa':'material_type size',
              'TV':'screen_quality sound smart_features'}


device_negotiation_monitor = {'Laptop':0,'SmartPhone':0,'Sofa':0,'TV':0,'headphone':0}'''

'''access_list=[]
access_cost={}

for key in X_access:
  access_list.extend(X_access[key].split())
for ele in access_list:
  access_cost[ele] = random.randint(500,2000)
print(access_cost)'''

#Start Prize = 
# Set Prize Product = 
# Bundle = 
# Delivery =
# tolerance = 10%

#product_price_range = {'Laptop':(15000,70000),'SmartPhone':(5000,25000),'Sofa':(7000,30000),'TV':(4000,40000)}

'''TOSS = ['H','T']
isaccept = random.choices(TOSS, weights = (70,30))
print(isaccept)
if isaccept[0]=='H':
  print('yes')
buyer_choices= [0,1,2,3,6,9,10]'''

def get_random_flow(data):
  # start: buyer 'H' [0,1,2,3,6,9,10]
  # start: buyer_accept 'T' [7]
  #TOSS = ['H','T']

  
  dialogue_set = []
  for i in range(201):
    turn=0
    start = True
    acceptable_priority = turn*10
    rest_prob = (100 - turn*10)
    product_choices = [0,1,2,3]
    bundle = random.choice(list(data.keys()))
    #bundle = prod_dict[bundle]
    clarification_monitor = {}
    
    #accept_weight = 10
    delivery_turn=0
    acess_turn=0
    buyer_choices = []
    X = ''
    f = open('conversation.txt','a')
    f.write("######conversation {0}###############\n".format(i))
    terminate=False
    prev_buyer=-1
    prev_seller = -1
    #added =False
    accept =False
    delivery = 500
    price_range = data[bundle]['price'].split('-')
    lowerp = int(price_range[0])
    higherp = int(price_range[1])
    dialogue = []
    first_seller = random.randint(lowerp,higherp) + delivery
    last_bundle_price=0
    last_bundle_price_buyer = 0
    first_buyer = random.randint(int(first_seller*0.60),int(first_seller*0.85)) + delivery
    reject_turn = 0
    total_seller_cost=0
    nego_turn=0
    bundle_cost=0
    item_monitor = Counter()
    item_X = -1
    removed = []
    item_select = []
    negotiable = []
    added = [False]
    add_flag = False
    print(i)
    f.write("Main Product:{0} Buyer selected price: {1} Seller selected price: {2} delivery charge: {3}\n".format(bundle,first_buyer,first_seller, delivery))
    while(terminate==False):
      #isaccept = random.choices(TOSS, weights = (accept_weight,100-accept_weight))
      #print(buyer)
      turn +=1
      buyer = -1
      seller = -1
      remove = False
      ad_item = 'NA'
      rem_item = 'NA'
      avail_clar=[]
      if start:
        
          
          
          nego_turn=0
          product_with_access = data[bundle]['accessories'].keys()
          features = data[bundle]['features'].split(',')
          all_comb = []
          for i in range(1,3):
            for combination in itertools.combinations(product_with_access, i):
                all_comb.append(combination)
          
          
          accesories = random.choice(all_comb)
          for el in accesories:
            clarification_monitor[el]=0
          for el1 in features:
            clarification_monitor[el1]=0
          clarification_monitor[bundle]=0

          for key in clarification_monitor:
              if clarification_monitor[key]==0:
                avail_clar.append(key)
          feature_sel = random.choice(avail_clar)
          for ele in accesories:
            added.append(False)
          for ele in accesories:
            bundle_cost = bundle_cost + access_cost[ele]
          f.write('Actual Bundle: {0} Total Bundle Cost: {1}\n'.format(accesories,bundle_cost))
          total_seller_cost = first_seller + bundle_cost
          total_buyer_cost = math.ceil(first_buyer + random.randint(bundle_cost//2,bundle_cost))
          num_items = len(accesories)
          items_select = []
          if num_items==1:
            item_monitor = {0:{'item':accesories[0],'acces_turn_buyer':0,'acces_turn_seller':0,'bundle_price_buyer':first_buyer+access_cost[accesories[0]],'bundle_price_seller':first_seller+access_cost[accesories[0]]},2:{'item':bundle,'acces_turn_buyer':0,'acces_turn_seller':0,'bundle_price_buyer':first_buyer,'bundle_price_seller':first_seller}}
            added = [False]
            items_select = [0,2]
          else:
            item_monitor = {0:{'item':accesories[0],'acces_turn_buyer':0,'acces_turn_seller':0,'bundle_price_buyer':first_buyer+access_cost[accesories[0]],'bundle_price_seller':first_seller+access_cost[accesories[0]]},1:{'item':accesories[1],'acces_turn_buyer':0,'acces_turn_seller':0,'bundle_price_buyer':first_buyer+access_cost[accesories[1]],'bundle_price_seller':first_seller+access_cost[accesories[1]]},2:{'item':bundle,'acces_turn_buyer':0,'acces_turn_seller':0,'bundle_price_buyer':first_buyer,'bundle_price_seller':first_seller}}
            items_select = [0,1,2]
            added = [False,False]
          
          print(item_monitor)
          #tolerance_total = 0.05*total_seller_cost
          tolerance = 0.05*(first_seller + bundle_cost)
          
          feature = random.choice(features)
          
        
              
          X = accesories
          acces_turn =0
          buyer_choices= [0,1,2,3,6,9,10]
          buyer = random.choice(buyer_choices)
          if buyer in [0,1,9]:
            if buyer == 0:
              seller = 0
              seller_choice = total_seller_cost
              buyer_choice = total_buyer_cost
              context = "bundle_delivery"
              #nego_turn = 1
            elif buyer in [1,9]:
              seller = random.choice([0,7,9])
              nego_turn = 1
              buyer_choice =  math.ceil(buyer_price_decay(total_seller_cost,total_buyer_cost,nego_turn))
              if seller in [0,7]:
                seller_choice = math.floor(seller_price_decay(total_seller_cost,total_buyer_cost,nego_turn))
                
              else:
                seller_choice = total_seller_cost
              #fnego_turn = nego_turn+1

              context = "bundle_delivery"
            start = False
            
          elif buyer in [2,3,10]:
            if buyer == 3:
              clarification_monitor[feature_sel] = 1
              buyer_choice = total_buyer_cost
              seller_choice = total_seller_cost 
              seller = 4
            elif buyer in [2,10]:
              
              if len(items_select)==2:
                item_X = 2
              else:
                item_X = random.choice(items_select)
              seller =  11
              
              

              if item_X!=2:
                removed.append(item_X)
                negotiable.append(item_X)
                buyer_choice = total_buyer_cost - access_cost[item_monitor[item_X]['item']]
                seller_choice = total_seller_cost - access_cost[item_monitor[item_X]['item']]
                rem_item = item_monitor[item_X]['item']
              else:
                rem_item = item_monitor[0]['item']
                if len(items_select)==3:
                  removed.extend([0,1])
                  negotiable.extend([0,1])
                  
                elif len(items_select)==2:
                  removed.extend([0])
                  negotiable.extend([0])
                buyer_choice = first_buyer
                seller_choice = first_seller

              
              
                
              #acces_turn=1
              last_bundle_price = seller_choice
              last_bundle_price_buyer = buyer_choice
              context = "nobundle_delivery"
              

            start = False    
            #remove = True
          elif buyer ==6:
            seller = 9
            seller_choice = total_seller_cost
            buyer_choice = total_buyer_cost
            #last_bundle_price = total_seller_cost
            #last_bundle_price_buyer = total_buyer_cost
            start = False
            context = "bundle_delivery"
          last_bundle_price = total_seller_cost
          last_bundle_price_buyer = total_buyer_cost

      else: 
            add_flag=True
            canRemove = True
            for el in added:
              if el == False:
                add_flag=False
            
            if len(removed)==len(accesories):
              canRemove = False
            elif len(removed)==1 and len(accesories)==2:
              if added[1-removed[0]]==True:
                canRemove = False
            elif len(removed)==0 and len(accesories)==1:
              if added[0] == True:
                canRemove = False
            clarification_flag = False
            avail_clar = []
            for key in clarification_monitor:
              if clarification_monitor[key]==0:
                avail_clar.append(key)
                clarification_flag = True
            feature_sel = random.choice(avail_clar)
            if seller_choice <= buyer_choice+tolerance or accept == True:
              print('accepted')
              accept = True
              buyer = 7
              seller = 8
              terminate == True
          
            elif prev_seller == 3:
              buyer =12
              '''if item_X!=-1:
                buyer_choice = buyer_price_decay(item_monitor[item_X]['bundle_price_seller'],item_monitor[item_X]['bundle_price_buyer'],item_monitor[item_X]['acces_turn_buyer'])
            

              else:
                buyer_choice = buyer_price_decay(total_seller_cost,total_buyer_cost,nego_turn)
              nego_turn = nego_turn+1'''


            elif len(removed)>0:
              if (add_flag==False and canRemove == True) and len(removed)<len(accesories) and delivery<1:
                
                buyer = random.choice([1,2,3,4,5,10,11])
              
              elif (len(removed)<len(accesories) and add_flag==False and canRemove == True):
                buyer = random.choice([1,2,3,4,5,10,11])
              elif (len(removed)<len(accesories) and add_flag==False):
                buyer = random.choice([1,3,4,5,11])
              elif (len(removed)==len(accesories) and (add_flag==False)):
                buyer = random.choice([1,3,4,5,8,11])
              
              elif len(negotiable)==0 and (len(removed)<len(accesories)) and canRemove == True  and add_flag==False:
                buyer = random.choice([2,3,6,5,8,10,11])
              elif len(negotiable)==0:
                buyer = random.choice([3,6,5,8,11])
              
                
            elif len(removed)==0:
              if add_flag==True and len(negotiable)!=0:
                buyer = random.choice([1,3,4,8,11])
              elif add_flag==True and len(negotiable)==0:
                buyer = random.choice([3,7,8,11])
              elif add_flag==False and (len(removed)<len(accesories)) and canRemove == True:
                buyer = random.choice([1,2,3,4,10,11])


            print(buyer_intent[buyer])
            if buyer_intent[buyer]=='NA':
              break
            
            if buyer ==8:
              if buyer_choice + 0.10*seller_choice>=seller_choice:
                  buyer = 7
                  seller = 8
                  accept = True
                  continue
              elif len(removed)==1 and len(accesories)==2:
                    prod_nego = 1-negotiable[0]
              elif (len(removed)==2 and len(accesories)==2) or (len(removed)==1 and len(accesories)==1):
                prod_nego=2
              elif len(removed)==0:
                prod_nego=-1
                nego_turn = nego_turn+1
              if prod_nego !=-1 and delivery_turn >=1:
                
                buyer_choice = math.ceil(buyer_price_decay(item_monitor[prod_nego]['bundle_price_seller'],item_monitor[prod_nego]['bundle_price_buyer'],item_monitor[prod_nego]['acces_turn_buyer']))-delivery
                  #seller_choice = seller_price_decay(first_seller,first_buyer,turn)-delivery
              elif prod_nego !=-1 and delivery_turn<1:
                buyer_choice = math.ceil(buyer_price_decay(item_monitor[prod_nego]['bundle_price_seller'],item_monitor[prod_nego]['bundle_price_buyer'],item_monitor[prod_nego]['acces_turn_buyer']))
              elif prod_nego == -1 and delivery_turn >=1:
                buyer_choice = math.ceil(buyer_price_decay(total_seller_cost,total_buyer_cost,nego_turn)) - delivery
              elif prod_nego == -1 and delivery_turn <1:
                buyer_choice = math.ceil(buyer_price_decay(total_seller_cost,total_buyer_cost,nego_turn))

              if len(removed)==0:
                f.write("Total seller cost: {0}  Total Buyer Cost: {1}  nego_turn: {2}\n".format(total_seller_cost,total_buyer_cost,nego_turn))
      
              
                #seller_choice = seller_price_decay(total_seller_cost,total_buyer_cost,turn)-delivery
              
                #seller_choice = seller_price_decay(total_seller_cost,total_buyer_cost,turn)
              if buyer_choice + 0.10*seller_choice>=seller_choice:
                  seller = 12
                  accept = True
              else:
                terminate=True
            else:
              if buyer == 5:
                prod_add = random.choice(removed)
                f.write("Item Added: {}\n".format(item_monitor[prod_add]['item']))
                seller = 2
                item_monitor[prod_add]['acces_turn']=1
                removed.remove(prod_add)
                added[prod_add] = True
                
                
                  #context = "bundle_nodelivery"
                seller_choice = seller_choice + access_cost[item_monitor[prod_add]['item']] 
                #total_seller_cost = seller_choice
                buyer_choice = buyer_choice + access_cost[item_monitor[prod_add]['item']]
                ad_item = item_monitor[prod_add]['item']
                  #total_buyer_cost = buyer_choice
                if len(removed)==0:
                  total_seller_cost = seller_choice
                  total_buyer_cost = buyer_choice
                
                
                
              elif buyer in [1,4,12]:
                  prev_nego_turn = nego_turn
                  if len(removed)==1 and len(accesories)==2:
                    prod_nego = 1-removed[0]
                  elif (len(removed)==2 and len(accesories)==2) or (len(removed)==1 and len(accesories)==1):
                    prod_nego=2
                  elif len(removed)==0:
                    prod_nego=-1
                    
                  if buyer == 1 and prod_nego!=-1:
                    item_monitor[prod_nego]['acces_turn_buyer']= item_monitor[prod_nego]['acces_turn_buyer'] + 1 
                    if delivery_turn>=1:
                      buyer_choice = math.ceil(buyer_price_decay(item_monitor[prod_nego]['bundle_price_seller'],item_monitor[prod_nego]['bundle_price_buyer'],item_monitor[prod_nego]['acces_turn_buyer'])) - delivery
                    elif delivery_turn<1:
                      buyer_choice = math.ceil(buyer_price_decay(item_monitor[prod_nego]['bundle_price_seller'],item_monitor[prod_nego]['bundle_price_buyer'],item_monitor[prod_nego]['acces_turn_buyer']))
                      
                  elif buyer == 1 and prod_nego==-1:
                    nego_turn+=1
                    if delivery_turn>=1:
                      buyer_choice = math.ceil(buyer_price_decay(total_seller_cost,total_buyer_cost,nego_turn)) - delivery
                    else:
                      buyer_choice = math.ceil(buyer_price_decay(total_seller_cost,total_buyer_cost,nego_turn))
                      
                  if buyer_choice + 0.10*seller_choice>=seller_choice:
                    buyer = 7
                    seller = 8
                    accept = True
                    continue  

                  seller = random.choice([1,2])
                  if seller == 2 and prod_nego!=-1:
                    item_monitor[prod_nego]['acces_turn_seller']+=1 
                    if delivery_turn>=1:
                      seller_choice = math.floor(seller_price_decay(item_monitor[prod_nego]['bundle_price_seller'],item_monitor[prod_nego]['bundle_price_buyer'],item_monitor[prod_nego]['acces_turn_seller'])) - delivery
                    else:
                      seller_choice = math.floor(seller_price_decay(item_monitor[prod_nego]['bundle_price_seller'],item_monitor[prod_nego]['bundle_price_buyer'],item_monitor[prod_nego]['acces_turn_seller']))
                  elif seller==2 and prod_nego==-1:
                    if prev_nego_turn == nego_turn:
                      nego_turn = nego_turn + 1
                    if delivery_turn>=1:
                      seller_choice = math.floor(seller_price_decay(total_seller_cost,total_buyer_cost,nego_turn)) - delivery
                    else:
                      seller_choice = math.floor(seller_price_decay(total_seller_cost,total_buyer_cost,nego_turn))
                    if len(removed)==0:
                      f.write("Total seller cost: {0}  Total Buyer Cost: {1}  nego_turn: {2}\n".format(total_seller_cost,total_buyer_cost,nego_turn))
      
                  for item in negotiable:
                    if item_monitor[item]['acces_turn_seller']==2:
                      negotiable.remove(item)
                  
                  
                  '''else:
                    if buyer==1 and delivery_turn>=1:
                      buyer_choice = buyer_price_decay(total_seller_cost,total_buyer_cost,nego_turn) - delivery
                    elif buyer==1:
                      buyer_choice = buyer_price_decay(total_seller_cost,total_buyer_cost,nego_turn)
                    seller = random.choice([1,2])
                    if seller == 2:
                      if delivery_turn>=1:
                        seller_choice = seller_price_decay(total_seller_cost,total_buyer_cost,nego_turn) - delivery
                      else:
                        seller_choice = seller_price_decay(total_seller_cost,total_buyer_cost,nego_turn)
                    nego_turn = nego_turn+1'''
                  
              elif buyer in [2,10]:
                    #last_bundle_price = seller_choice
                    
                    if len(removed)==0:
                      for idx,ele in enumerate(added):
                        if ele == False:
                          item_X = idx
                          break
                      sel_item = []
                  
                      
                      last_bundle_price = seller_choice
                      last_bundle_price_buyer = buyer_choice
                    elif len(removed)==1 and len(accesories)==2:
                      item_X= 1 - removed[0]

                    removed.append(item_X)
                    negotiable.append(item_X)
                    rem_item = item_monitor[item_X]['item']
                    buyer_choice = buyer_choice - access_cost[item_monitor[item_X]['item']]
                    seller_choice = seller_choice - access_cost[item_monitor[item_X]['item']]
                    if len(removed)==len(accesories) or len(removed)==len(accesories):
                      item_monitor[2]['bundle_price_seller'] = seller_choice
                      item_monitor[2]['bundle_price_buyer'] = buyer_choice

                    
                    
                    seller =  random.choice([2,3])
                    
                    


                  


                    
                  
              
                    #removed = True
              elif buyer == 3:
                    if clarification_flag == False:
                      continue
                    seller = 4
              elif buyer ==11:
                  if delivery_turn>=1:
                    continue
                  buyer_choice = buyer_choice - delivery
                  seller = 10
                  seller_choice = seller_choice - delivery
                  delivery_turn = delivery_turn+1
              elif buyer ==7:
                  seller = 8
                  terminate = True
              elif buyer ==6 and prev_buyer!=6 and prev_seller not in [2,5]:
                  seller=1
                
              else:
                  continue
            #accept_weight = accept_weight + 10
      if len(removed)==0:
        bundle_selected = [bundle,accesories]
        X_item = '--'
      elif len(removed)==1 and removed[0]==0 and len(accesories)>1:
        bundle_selected = [bundle,(item_monitor[1]['item'],)]
        X_item = (item_monitor[0]['item'],)
      elif len(removed)==1 and removed[0]==1 and len(accesories)>1:
        bundle_selected = [bundle,(item_monitor[0]['item'],)]
        X_item = (item_monitor[1]['item'],)
      else:
        bundle_selected = [bundle]
        X_item = accesories
      b_len = len(str(buyer_choice))
      s_len = len(str(seller_choice))

      if b_len==3:
        round_dig_b = math.pow(10,1)
      if s_len==3:
        round_dig_s = math.pow(10,1)
      if b_len>3:
        round_dig_b = math.pow(10,2)
      if s_len>3:
        round_dig_s = math.pow(10,2)
      if b_len<=2:
        round_dig_b = 5
      if s_len<=2:
        round_dig_s = 5
      buyer_choice = (buyer_choice // round_dig_b)*round_dig_b 
      seller_choice = (seller_choice // round_dig_s)*round_dig_s
      # [turn, intent,PRICE, product, actual bundle, bundle_selected, removed, clarification_for,item_added,item_removed]

      f.write("Turn: {0} Bundle_selected: {1} X: {2}\n".format(turn,bundle_selected,X_item))
      if buyer !=3:
        Generated_conv = "Buyer: {0}   Buyer_Price: {1}   Seller: {2}   Seller_Price {3}\n\n".format(buyer_intent[buyer],buyer_choice,seller_intent[seller],seller_choice)
        clarification_for = 'NA'
        dialogue_buyer = [turn, buyer_intent[buyer], buyer_choice, bundle, [bundle,accesories], bundle_selected, X_item,clarification_for,ad_item,rem_item]
        dialogue_seller = [turn, seller_intent[seller], seller_choice, bundle, [bundle,accesories], bundle_selected, X_item,clarification_for,ad_item,rem_item]
        dialogue.append(dialogue_buyer)
        dialogue.append(dialogue_seller)
      else:
        Generated_conv = "Buyer: {0}   Buyer_Asked_Clarification For: {1}   Seller: {2}   Seller Provided Clarification For: {3}\n\n".format(buyer_intent[buyer],feature_sel,seller_intent[seller],feature_sel)
        clarification_for = feature_sel
        dialogue_buyer = [turn, buyer_intent[buyer], 'NA', bundle,[bundle,accesories] , bundle_selected, X_item,clarification_for,ad_item,rem_item]
        dialogue_seller = [turn, seller_intent[seller], 'NA', bundle, [bundle,accesories], bundle_selected, X_item,clarification_for,ad_item,rem_item]
        dialogue.append(dialogue_buyer)
        dialogue.append(dialogue_seller)
      f.write(Generated_conv)
      prev_buyer= buyer
      prev_seller  = seller
    dialogue_set.append(dialogue)
      
  return dialogue_set

if __name__ == "__main__":
  buyer_intent = {-1: 'NA',0: 'Greet-Ask',1:'Negotiate-Price-Decrease',2:'Negotiate-Remove-X',3:'Ask_Clarification-Y',4:'Negotiate-Price-NoChange',5:'Negotiate-Add-X',6:'Ask_Price',7:'Accept',8:'Reject',9:'Greet-Ask_Negotiate-Price-Decrease',10:'Negotiate-Remove-X_Negotiate-Price-Decrease',11:'Negotiate-Remove-delivery',12:'tell_price'}
  seller_intent = {-1: 'NA',0: 'Greet-Inform',1:'Negotiate-Price-NoChange',2:'Negotiate-Price-Increase',3:'Ask_Price',4:'Provide_Clarification-Y',5:'Negotiate-Add-X',6:'Accept',7:'Greet-Inform_Negotiate-Price-Increase',8:'Acknowledge acceptance',9:'Greet-Inform_Negotiate-Price-NoChange',10:'Negotiate-Remove-delivery',11:'Negotiate-Price-Remove-X',12:'avoid_rejection'}

  access_list=[]
  access_cost={}
  json_file =  open('product_data.json')
  data = json.load(json_file)
  for key1 in data.keys():
    for key2 in data[key1]['accessories'].keys():
      access_list.append(key2)
  for ele in access_list:
    access_cost[ele] = random.randint(500,2000)
  print(access_cost)
  dialogue_set = get_random_flow(data)

#print(dialogue_set)
print(buyer_intent[12])

